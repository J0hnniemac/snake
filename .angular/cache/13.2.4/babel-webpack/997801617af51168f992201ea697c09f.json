{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst _c0 = [\"canvas\"];\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseURL = \"http://172.17.0.2:5001/highscore\";\n      this.title = 'Snake Game';\n      this.score = 0;\n      this.highscore = 1; //xxx = 0;\n\n      this.grid = 16;\n      this.count = 0;\n      this.max = 0;\n      this.scell = [];\n      this.snake = {\n        x: 160,\n        y: 160,\n        // snake velocity. moves one grid length every frame in either the x or y direction\n        dx: this.grid,\n        dy: 0,\n        // keep track of all grids the snake body occupies\n        cells: [],\n        // length of the snake. grows when eating an apple\n        maxCells: 4\n      };\n      this.apple = {\n        x: 320,\n        y: 320\n      };\n      this.width = 400;\n      this.height = 400;\n    }\n\n    keyEvent(event) {\n      if (event.key == 'ArrowDown') {\n        // Your row selection code\n        //console.log(\"ARROW DOWN\");\n        this.MoveDown();\n      }\n\n      if (event.key == 'ArrowUp') {\n        // Your row selection code\n        //console.log(\"ARROW UP\");\n        this.MoveUp();\n      }\n\n      if (event.key == 'ArrowLeft') {\n        // Your row selection code\n        //console.log(\"ARROW Left\");\n        this.MoveLeft();\n      }\n\n      if (event.key == 'ArrowRight') {\n        // Your row selection code\n        //console.log(\"ARROW Right\");\n        this.MoveRight();\n      }\n    }\n\n    ngOnInit() {\n      const cav = this.canvas.nativeElement.getContext('2d');\n\n      if (!cav || !(cav instanceof CanvasRenderingContext2D)) {\n        throw new Error('Failed to get 2D context');\n      }\n\n      this.ctx = cav;\n    }\n\n    animate() {\n      console.log(\"animate\"); //this.ctx.fillStyle = 'blue';\n      //this.ctx.fillRect(0, 0, 40, 40);\n      //this.loop()\n      //  const id = requestAnimationFrame(() => (this.loop(this.ctx)));\n      //      const id = requestAnimationFrame(this.loop(this.ctx));\n\n      this.loop(this.ctx);\n    }\n\n    MoveLeft() {\n      this.snake.dx = -this.grid;\n      this.snake.dy = 0;\n    }\n\n    MoveRight() {\n      this.snake.dx = this.grid;\n      this.snake.dy = 0;\n    }\n\n    MoveUp() {\n      this.snake.dy = -this.grid;\n      this.snake.dx = 0;\n    }\n\n    MoveDown() {\n      this.snake.dy = this.grid;\n      this.snake.dx = 0;\n    }\n\n    getHighScoreFromAPI() {\n      return this.httpClient.get(this.baseURL);\n    }\n\n    sendHighScore(score) {\n      console.log(\"sendHighScore\");\n      var scoreurl = \"http://172.17.0.2:5001/sethighscore/\" + score;\n      console.log(scoreurl);\n      this.httpClient.get(scoreurl).subscribe();\n    }\n\n    ResetGame() {\n      //this.highscore = this.getHighScoreFromAPI()\n      // this.getHighScoreFromAPI().subscribe(x=> this.highscore = +x)\n      this.getHighScoreFromAPI().subscribe(x => this.checkHighScore(x));\n      this.snake.x = 160;\n      this.snake.y = 160;\n      this.snake.cells = [];\n      this.snake.maxCells = 4;\n      this.snake.dx = this.grid;\n      this.snake.dy = 0;\n      this.apple.x = this.getRandomInt(0, 25) * this.grid;\n      this.apple.y = this.getRandomInt(0, 25) * this.grid; //this.document.getElementById('score').innerHTML = score;\n\n      this.scell = [];\n    }\n\n    checkHighScore(hs) {\n      console.log(\"checkHighScore\");\n      var numhs = +hs;\n      console.log(numhs);\n      console.log(this.highscore);\n      console.log(this.score);\n\n      if (numhs > this.highscore) {\n        this.highscore = numhs;\n      }\n\n      if (this.score > numhs) {\n        this.sendHighScore(this.score);\n        this.getHighScoreFromAPI().subscribe(x => this.checkHighScore(x));\n      }\n\n      this.score = 0;\n    }\n\n    GameOver() {\n      this.ResetGame();\n    }\n\n    getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n    loop(ctx) {\n      const id = requestAnimationFrame(() => this.loop(this.ctx)); // slow game loop to 15 fps instead of 60 (60/15 = 4)\n\n      if (++this.count < 4) {\n        return;\n      }\n\n      this.count = 0;\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height); // move snake by it's velocity\n\n      this.snake.x += this.snake.dx;\n      this.snake.y += this.snake.dy;\n\n      if (this.snake.x < 0) {\n        this.GameOver();\n      } else if (this.snake.x >= this.width) {\n        this.GameOver();\n      }\n\n      if (this.snake.y < 0) {\n        this.GameOver();\n      } else if (this.snake.y >= this.height) {\n        this.GameOver();\n      } // keep track of where snake has been. front of the array is always the head\n\n\n      this.scell.unshift(this.snake.x, this.snake.y); // remove cells as we move away from them\n\n      if (this.scell.length > this.snake.maxCells) {\n        this.scell.pop();\n        this.scell.pop();\n      } // draw apple\n\n\n      ctx.fillStyle = '#acf04d';\n      ctx.fillRect(this.apple.x, this.apple.y, this.grid - 1, this.grid - 1); // draw snake one cell at a time\n\n      ctx.fillStyle = '#f04dac';\n\n      for (let i = 0; i < this.scell.length - 2; i = i + 2) {\n        //draw snake\n        let x = this.scell[i];\n        let y = this.scell[i + 1];\n        ctx.fillRect(x, y, this.grid - 1, this.grid - 1);\n        ctx.fillStyle = '#4dacf1';\n\n        if (x === this.apple.x && y === this.apple.y) {\n          this.snake.maxCells++;\n          this.snake.maxCells++;\n          this.score += 10; //max=score;\n          //document.getElementById('score').innerHTML = score;\n          // canvas is 400x400 which is 25x25 grids\n\n          this.apple.x = this.getRandomInt(0, 25) * this.grid;\n          this.apple.y = this.getRandomInt(0, 25) * this.grid;\n        }\n      }\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    viewQuery: function AppComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n      }\n    },\n    hostBindings: function AppComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function AppComponent_keydown_HostBindingHandler($event) {\n          return ctx.keyEvent($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    decls: 12,\n    vars: 3,\n    consts: [[1, \"center\"], [\"width\", \"400\", \"height\", \"400\"], [\"canvas\", \"\"], [3, \"click\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(3, \"div\", 0)(4, \"h2\");\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 0);\n        i0.ɵɵelement(7, \"canvas\", 1, 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 0)(10, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_10_listener() {\n          return ctx.animate();\n        });\n        i0.ɵɵtext(11, \"Start\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.title);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate2(\"Score: \", ctx.score, \" HighScore: \", ctx.highscore, \"\");\n      }\n    },\n    styles: [\"html[_ngcontent-%COMP%], body[_ngcontent-%COMP%]{height:100%;margin:0}body[_ngcontent-%COMP%]{background:#323232;display:flex;align-items:center;justify-content:center}canvas[_ngcontent-%COMP%]{border:3px solid white}#p1[_ngcontent-%COMP%]{color:#fff;position:absolute;left:640px;top:4px}#p2[_ngcontent-%COMP%]{color:#fff;position:absolute;left:950px;top:4px}#score[_ngcontent-%COMP%]{color:#fff;position:absolute;left:720px;top:4px}#high[_ngcontent-%COMP%]{color:#fff;position:absolute;left:1060px;top:4px}h1[_ngcontent-%COMP%]{color:#fff;font-family:Arial,Helvetica,sans-serif;font-size:250%}h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%]{color:#dedede;font-family:Arial,Helvetica,sans-serif;font-weight:lighter}.center[_ngcontent-%COMP%]{display:flex;justify-content:center}canvas[_ngcontent-%COMP%]{border-style:double}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}